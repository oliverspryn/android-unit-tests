plugins {
    id 'com.android.application'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'de.mannodermaus.android-junit5'
    id 'jacoco'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId 'com.oliverspryn.medium.androidunittests'

        minSdkVersion 21
        targetSdkVersion 29

        versionCode 1
        versionName '1.0.0'
    }

    buildTypes {
        debug {}
        release { minifyEnabled false }
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }

            jacocoOptions {
                csv.enabled = true
                html.enabled = true
                xml.enabled = true
            }
        }

        unitTests.all {
            testLogging.events = ['failed', 'passed', 'skipped']
        }
    }
}

dependencies {

    // Dagger
    implementation 'com.google.dagger:dagger:2.22.1'
    kapt 'com.google.dagger:dagger-compiler:2.22.1'

    // region Application

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // endregion

    // region Unit Tests

    // Expekt
    testImplementation 'com.winterbe:expekt:0.5.0'

    // Kotlin
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0'

    // JUnit
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.platform:junit-platform-runner:1.3.2'

    // Spek
    testImplementation 'org.spekframework.spek2:spek-dsl-jvm:2.0.8'
    testImplementation 'org.spekframework.spek2:spek-runner-junit5:2.0.8'

    // endregion
}

// region Unit Test Configuration

android.testOptions.unitTests {
    returnDefaultValues = true

    all {
        testLogging {
            outputs.upToDateWhen {
                false
            }
        }
    }
}

// Thank you: https://stackoverflow.com/a/36130467/
tasks.withType(Test) {
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut'
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true

        debug {
            events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
}

// Thank you: https://stackoverflow.com/a/29887806
task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def ignoredFilter = [
            // One-offs
            '**/ViewMvcFactory*.*',

            // Android Files
            '**/R*.*',
            '**/R$*.*',
            '**/BuildConfig*.*',

            // Dagger
            '**/dagger/**',
            '**/*_Factory.*',
            '**/*_MembersInjector.*',

            // Navigation Graph
            '**/*Args.*',
            '**/*Directions.*'
    ]

    getClassDirectories().from(fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: ignoredFilter))
    getExecutionData().from(fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec']))
    getSourceDirectories().from(files(android.sourceSets.main.java.srcDirs))
}

coveralls {
    jacocoReportPath "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

afterEvaluate {
    test.finalizedBy(jacocoTestReport)
}

// endregion
